<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.FactoryMapper">
  <resultMap id="BaseResultMap" type="com.example.model.Factory">
    <id column="typeId" jdbcType="INTEGER" property="typeid" />
    <result column="fName" jdbcType="VARCHAR" property="fname" />
    <result column="model" jdbcType="INTEGER" property="model" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.model.Factory">
    <result column="instruction" jdbcType="LONGVARCHAR" property="instruction" />
  </resultMap>
  <sql id="Base_Column_List">
    typeId, fName, model
  </sql>
  <sql id="Blob_Column_List">
    instruction
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from factory
    where typeId = #{typeid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from myhome.factory
    where typeId = #{typeid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.model.Factory">
    insert into myhome.factory (typeId, fName, model,
      instruction)
    values (#{typeid,jdbcType=INTEGER}, #{fname,jdbcType=VARCHAR}, #{model,jdbcType=INTEGER}, 
      #{instruction,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.model.Factory">
    insert into myhome.factory
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="typeid != null">
        typeId,
      </if>
      <if test="fname != null">
        fName,
      </if>
      <if test="model != null">
        model,
      </if>
      <if test="instruction != null">
        instruction,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="typeid != null">
        #{typeid,jdbcType=INTEGER},
      </if>
      <if test="fname != null">
        #{fname,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        #{model,jdbcType=INTEGER},
      </if>
      <if test="instruction != null">
        #{instruction,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.model.Factory">
    update myhome.factory
    <set>
      <if test="fname != null">
        fName = #{fname,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        model = #{model,jdbcType=INTEGER},
      </if>
      <if test="instruction != null">
        instruction = #{instruction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where typeId = #{typeid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.model.Factory">
    update myhome.factory
    set fName = #{fname,jdbcType=VARCHAR},
      model = #{model,jdbcType=INTEGER},
      instruction = #{instruction,jdbcType=LONGVARCHAR}
    where typeId = #{typeid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.model.Factory">
    update myhome.factory
    set fName = #{fname,jdbcType=VARCHAR},
      model = #{model,jdbcType=INTEGER}
    where typeId = #{typeid,jdbcType=INTEGER}
  </update>

  <select id="selectAll" resultMap="BaseResultMap">
    select * from myhome.factory where 1=1
    <if test="keyword != null and keyword != ''">
      and (fName like '%${keyword}%')
    </if>
  </select>

  <select id="getCountByTypeId" resultType="java.util.Map">
    select ifnull(r.c,0) c,f.typeId,f.fName,f.model from myhome.factory f
    left join (
    select count(*) c,typeId from myhome.door where 1=1
    <if test="rid!=null">
      and rId=#{rid}
    </if>
    union
    select count(*) c,typeId from myhome.light where 1=1
    <if test="rid!=null">
      and rId=#{rid}
    </if>
    union
    select count(*) c,typeId from myhome.sensor where 1=1
    <if test="rid!=null">
      and rId=#{rid}
    </if>
    union
    select count(*) c,typeId from myhome.fans where 1=1
    <if test="rid!=null">
      and rId=#{rid}
    </if>
    )r on f.typeId=r.typeId
    group by f.typeId
  </select>
</mapper>